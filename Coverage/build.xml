<!-- Sample Ant build file for running RacingScore under JaCoCo -->
<!-- Jonathan Cook, 17 Sep 2015 -->
<project name="racingscore" default="jacocoreport" basedir = "." xmlns:jacoco="antlib:org.jacoco.ant">

   <!-- property to allow ant to find jacoco  -->
   <property name="jacoco.dir" location="lib/"/>
   <property name="src-dir" location="src/"/>
   <property name="build-dir" location="bin/"/>
   <property name="result.dir" location="./target" />
	<property name="result.report.dir" location="${result.dir}/site/jacoco" />
	<property name="result.exec.file" location="${result.dir}/jacoco.exec" />


   <taskdef uri="antlib:org.jacoco.ant" resource="org/jacoco/ant/antlib.xml">
      <classpath path="${jacoco.dir}/jacocoant.jar"/>
   </taskdef>

   <!-- standard compile task, but turn debugging on for source viewing -->
   <target name="compile" description="Compile Source">
      <mkdir dir = "${build-dir}" />
      <javac includeantruntime="false" debug="true" srcdir="${src-dir}" destdir="${build-dir}"/>
   </target>

   <!-- tests if new jacoco run is needed by checking if the jacoco.exec file is
        newer than the class files or this build file -->
   	<target name="checkRun">
		<uptodate property="run.notneeded" targetfile="${result.exec.file}">
			<srcfiles dir="${src-dir}" includes="**/*.java build.xml" />
		</uptodate>
	</target>

   <!-- run program under jacoco -->
   <target name="test" depends="compile,checkRun" unless="run.notneeded">
      <echo>run needed...</echo>
      <delete>
         <!-- must delete coverage data file to prevent coverage accumulation -->
         <fileset dir="." includes="jacoco.exec"/>
      </delete>
      
      <!--Start of Tests -->

      <echo message="Tests against RacingScore1"/>
      <echo message=""/>
      <!--RacingScore1: Testing score2 > score1 > score3 -->
      <echo message="TEST RacingScore1: 7 10 4"/>
      <jacoco:coverage destfile="${result.exec.file}">
         <java classname="edu.nmsu.cs.scoring.RacingScore1" fork="true">
            <classpath path="${build-dir}" />
            <arg value="7"/><arg value="10"/><arg value="4"/>
         </java>
      </jacoco:coverage>

      <!--RacingScore1: Testing score1 > score2 > score3 -->
      <echo message="TEST RacingScore1: 10 7 4"/>
      <jacoco:coverage destfile="${result.exec.file}">
         <java classname="edu.nmsu.cs.scoring.RacingScore1" fork="true">
            <classpath path="${build-dir}" />
            <arg value="10"/><arg value="7"/><arg value="4"/>
         </java>
      </jacoco:coverage>

      <!--RacingScore1: Testing score3 > score2 > score1 -->
      <echo message="TEST RacingScore1: 4 7 10"/>
      <jacoco:coverage destfile="${result.exec.file}">
         <java classname="edu.nmsu.cs.scoring.RacingScore1" fork="true">
            <classpath path="${build-dir}" />
            <arg value="4"/><arg value="7"/><arg value="10"/>
         </java>
      </jacoco:coverage>

      <!--RacingScore1: Testing score3 = score2 = score1 -->
      <echo message="TEST RacingScore1: 7 7 7"/>
      <jacoco:coverage destfile="${result.exec.file}">
         <java classname="edu.nmsu.cs.scoring.RacingScore1" fork="true">
            <classpath path="${build-dir}" />
            <arg value="7"/><arg value="7"/><arg value="7"/>
         </java>
      </jacoco:coverage>


      <!--RacingScore1: Testing input > 50 -->
      <echo message="TEST RacingScore1: 4 51 10"/>
      <jacoco:coverage destfile="${result.exec.file}">
         <java classname="edu.nmsu.cs.scoring.RacingScore1" fork="true">
            <classpath path="${build-dir}" />
            <arg value="4"/><arg value="51"/><arg value="10"/>
         </java>
      </jacoco:coverage>

      <!--RacingScore1: Testing input < 0 -->
      <echo message="TEST RacingScore1: 4 -1 10"/>
      <jacoco:coverage destfile="${result.exec.file}">
         <java classname="edu.nmsu.cs.scoring.RacingScore1" fork="true">
            <classpath path="${build-dir}" />
            <arg value="4"/><arg value="-1"/><arg value="10"/>
         </java>
      </jacoco:coverage>

      <!--RacingScore1: Testing invalid length of inputs -->
      <echo message="TEST RacingScore1: 4 7 "/>
      <jacoco:coverage destfile="${result.exec.file}">
         <java classname="edu.nmsu.cs.scoring.RacingScore1" fork="true">
            <classpath path="${build-dir}" />
            <arg value="4"/><arg value="7"/>
         </java>
      </jacoco:coverage>

      <!--RacingScore1: Testing invalid type of input -->
      <echo message="TEST RacingScore1: four 7 ten"/>
      <jacoco:coverage destfile="${result.exec.file}">
         <java classname="edu.nmsu.cs.scoring.RacingScore1" fork="true">
            <classpath path="${build-dir}" />
            <arg value="four"/><arg value="7"/><arg value="ten"/>
         </java>
      </jacoco:coverage>

      <!--RacingScore1: Testing invalid type of input -->
      <echo message="TEST RacingScore1: 4.5 7 10"/>
      <jacoco:coverage destfile="${result.exec.file}">
         <java classname="edu.nmsu.cs.scoring.RacingScore1" fork="true">
            <classpath path="${build-dir}" />
            <arg value="4.5"/><arg value="7"/><arg value="10"/>
         </java>
      </jacoco:coverage>

      <echo message=""/>
      <echo message="Tests against RacingScore2"/>
      <echo message=""/>
      <!--RacingScore2: Testing score2 > score1 > score3 -->
      <echo message="TEST RacingScore2: 7 10 4"/>
      <jacoco:coverage destfile="${result.exec.file}">
         <java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
            <classpath path="${build-dir}" />
            <arg value="7"/><arg value="10"/><arg value="4"/>
         </java>
      </jacoco:coverage>

      <!--RacingScore2: Testing score1 > score2 > score3 -->
      <echo message="TEST RacingScore2: 10 7 4"/>
      <jacoco:coverage destfile="${result.exec.file}">
         <java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
            <classpath path="${build-dir}" />
            <arg value="10"/><arg value="7"/><arg value="4"/>
         </java>
      </jacoco:coverage>

      <!--RacingScore2: Testing score3 > score2 > score1 -->
      <echo message="TEST RacingScore2: 4 7 10"/>
      <jacoco:coverage destfile="${result.exec.file}">
         <java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
            <classpath path="${build-dir}" />
            <arg value="4"/><arg value="7"/><arg value="10"/>
         </java>
      </jacoco:coverage>


      <!--RacingScore2: Testing score1 >= score2 > score3 -->
      <echo message="TEST RacingScore2: 10 10 4"/>
      <jacoco:coverage destfile="${result.exec.file}">
         <java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
            <classpath path="${build-dir}" />
            <arg value="10"/><arg value="10"/><arg value="4"/>
         </java>
      </jacoco:coverage>

      <!--RacingScore2: Testing score1 > score2 >= score3 -->
      <echo message="TEST RacingScore2: 10 7 7"/>
      <jacoco:coverage destfile="${result.exec.file}">
         <java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
            <classpath path="${build-dir}" />
            <arg value="10"/><arg value="7"/><arg value="7"/>
         </java>
      </jacoco:coverage>
      
      <!--RacingScore2: Testing score3 = score2 = score1 -->
      <echo message="TEST RacingScore2: 7 7 7"/>
      <jacoco:coverage destfile="${result.exec.file}">
         <java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
            <classpath path="${build-dir}" />
            <arg value="7"/><arg value="7"/><arg value="7"/>
         </java>
      </jacoco:coverage>

      <!--RacingScore2: Testing score1 > 50 -->
      <echo message="TEST RacingScore2: 51 4 10"/>
      <jacoco:coverage destfile="${result.exec.file}">
         <java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
            <classpath path="${build-dir}" />
            <arg value="51"/><arg value="4"/><arg value="10"/>
         </java>
      </jacoco:coverage>

      <!--RacingScore2: Testing score2 > 50 -->
      <echo message="TEST RacingScore2: 4 51 10"/>
      <jacoco:coverage destfile="${result.exec.file}">
         <java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
            <classpath path="${build-dir}" />
            <arg value="4"/><arg value="51"/><arg value="10"/>
         </java>
      </jacoco:coverage>

      <!--RacingScore2: Testing score3 > 50 -->
      <echo message="TEST RacingScore2: 4 10 51"/>
      <jacoco:coverage destfile="${result.exec.file}">
         <java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
            <classpath path="${build-dir}" />
            <arg value="4"/><arg value="10"/><arg value="51"/>
         </java>
      </jacoco:coverage>

      <!--RacingScore2: Testing score1 < 0 -->
      <echo message="TEST RacingScore2: -1 4 10"/>
      <jacoco:coverage destfile="${result.exec.file}">
         <java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
            <classpath path="${build-dir}" />
            <arg value="-1"/><arg value="4"/><arg value="10"/>
         </java>
      </jacoco:coverage>

      <!--RacingScore2: Testing score2 < 0 -->
      <echo message="TEST RacingScore2: 4 -1 10"/>
      <jacoco:coverage destfile="${result.exec.file}">
         <java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
            <classpath path="${build-dir}" />
            <arg value="4"/><arg value="-1"/><arg value="10"/>
         </java>
      </jacoco:coverage>

      <!--RacingScore2: Testing score3 < 0 -->
      <echo message="TEST RacingScore2: 4 10 -1"/>
      <jacoco:coverage destfile="${result.exec.file}">
         <java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
            <classpath path="${build-dir}" />
            <arg value="4"/><arg value="10"/><arg value="-1"/>
         </java>
      </jacoco:coverage>

      <!--RacingScore2: Testing invalid length of inputs -->
      <echo message="TEST RacingScore2: (None)"/>
      <jacoco:coverage destfile="${result.exec.file}">
         <java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
            <classpath path="${build-dir}" />
         </java>
      </jacoco:coverage>

      <!--RacingScore2: Testing invalid length of inputs -->
      <echo message="TEST RacingScore2: 4 "/>
      <jacoco:coverage destfile="${result.exec.file}">
         <java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
            <classpath path="${build-dir}" />
            <arg value="4"/>
         </java>
      </jacoco:coverage>

      <!--RacingScore2: Testing invalid length of inputs -->
      <echo message="TEST RacingScore2: 4 7 "/>
      <jacoco:coverage destfile="${result.exec.file}">
         <java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
            <classpath path="${build-dir}" />
            <arg value="4"/><arg value="7"/>
         </java>
      </jacoco:coverage>

      <!--RacingScore2: Testing invalid length of inputs -->
      <echo message="TEST RacingScore2: 4 7 10 11"/>
      <jacoco:coverage destfile="${result.exec.file}">
         <java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
            <classpath path="${build-dir}" />
            <arg value="4"/><arg value="7"/><arg value="10"/><arg value="11"/>
         </java>
      </jacoco:coverage>

      <!--RacingScore2: Testing invalid type of input -->
      <echo message="TEST RacingScore2: four 7 ten"/>
      <jacoco:coverage destfile="${result.exec.file}">
         <java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
            <classpath path="${build-dir}" />
            <arg value="four"/><arg value="7"/><arg value="ten"/>
         </java>
      </jacoco:coverage>

      <!--RacingScore2: Testing invalid type of input -->
      <echo message="TEST RacingScore2: 3.5 7 10"/>
      <jacoco:coverage destfile="${result.exec.file}">
         <java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
            <classpath path="${build-dir}" />
            <arg value="3.5"/><arg value="7"/><arg value="10"/>
         </java>
      </jacoco:coverage>
      
   <!--End of Tests -->
   </target>

   <!-- tests if new jacoco report needs generated by checking if top report file
        (index.html) is newer than the run data file (jacoco.exec) -->
   <target name="checkReport">
      <uptodate property="report.notneeded" targetfile="${result.report.dir}/index.html" srcfile="${result.exec.file}" />
   </target>

   <!-- generate a new jacoco report from a new data file; only runs if needed -->
   <target name="jacocoreport" depends="test,checkReport" unless="report.notneeded">
      <echo>report needed...</echo>
      <jacoco:report>
         <executiondata>
            <file file="${result.exec.file}" />
         </executiondata>
         <structure name="JaCoCo Ant Example">
            <classfiles>
               <fileset dir="${build-dir}"/>
            </classfiles>
            <sourcefiles encoding="UTF-8">
               <fileset dir="${src-dir}"/>
            </sourcefiles>
         </structure>
         <html destdir="${result.report.dir}" />
			<csv destfile="${result.report.dir}/report.csv" />
			<xml destfile="${result.report.dir}/report.xml" />
      </jacoco:report>
   </target>

   <!-- clean up by removing all generated files; do "ant clean" to start afresh -->
   <target name="clean">
      <delete>
			<fileset dir="." includes="**/*.class **/jacoco.exec" />
		</delete>
      <delete dir="${result.report.dir}" />
     
   </target>

</project>