<!-- Ant Build reconfigured from Jonathan Cook to be used with RacingScore -->
<project name="Racing Score" default="report" xmlns:jacoco="antlib:org.jacoco.ant">
	<property name="jacoco" location="lib/" />
	<property name="src" location="src/" />
	<property name="build" location="bin/" />
	<property name="result" location="./target" />
	<property name="result.report.dir" location="${result}/site/jacoco" />
	<property name="result.exec.file" location="${result}/jacoco.exec" />

	<taskdef uri="antlib:org.jacoco.ant" resource="org/jacoco/ant/antlib.xml">
		<classpath path="${jacoco}/jacocoant.jar" />
	</taskdef>

	<!-- standard compile task, but turn debugging on for source viewing -->
	<target name="compile" description="compile the source">
		<mkdir dir="${build}" />
		<javac srcdir="${src}" destdir="${build}" includeantruntime="false" debug="true" />
	</target>

	<!-- tests if new jacoco run is needed by checking if the jacoco.exec file is
        newer than the class files or this build file -->
	<target name="checkRun">
		<uptodate property="run.notneeded" targetfile="${result.exec.file}">
			<srcfiles dir="${src}" includes="**/*.java build.xml" />
		</uptodate>
	</target>

	<!-- run program under jacoco: this example has two runs, you'll need to perhaps
        modify them, and then add more; this only runs if needed -->
	<target name="jacocorun" depends="compile,checkRun" unless="run.notneeded">
		<echo>run needed...</echo>

		<!--TEST CASES RacingScore1-->
      <echo message="TEST RacingScore1: 1 2 3"/>
      <jacoco:coverage destfile="${result.exec.file}">
         <java classname="edu.nmsu.cs.scoring.RacingScore1" fork="true">
            <classpath path="${build}" />
            <arg value="1"/><arg value="2"/><arg value="3"/>
         </java>
      </jacoco:coverage>

      <echo message="TEST RacingScore1: 3 2 1"/>
      <jacoco:coverage destfile="${result.exec.file}">
         <java classname="edu.nmsu.cs.scoring.RacingScore1" fork="true">
            <classpath path="${build}" />
            <arg value="3"/><arg value="2"/><arg value="1"/>
         </java>
      </jacoco:coverage>

      <echo message="TEST RacingScore1: 8 9 6"/>
      <jacoco:coverage destfile="${result.exec.file}">
         <java classname="edu.nmsu.cs.scoring.RacingScore1" fork="true">
            <classpath path="${build}" />
            <arg value="8"/><arg value="9"/><arg value="6"/>
         </java>
      </jacoco:coverage>

      <echo message="TEST RacingScore1: 3 3 3"/>
      <jacoco:coverage destfile="${result.exec.file}">
         <java classname="edu.nmsu.cs.scoring.RacingScore1" fork="true">
            <classpath path="${build}" />
            <arg value="3"/><arg value="3"/><arg value="3"/>
         </java>
      </jacoco:coverage>

      <echo message="TEST RacingScore1: 1 2"/>
      <jacoco:coverage destfile="${result.exec.file}">
         <java classname="edu.nmsu.cs.scoring.RacingScore1" fork="true">
            <classpath path="${build}" />
            <arg value="1"/><arg value="2"/>
         </java>
      </jacoco:coverage>

      <echo message="TEST RacingScore1: 1 2 a"/>
      <jacoco:coverage destfile="${result.exec.file}">
         <java classname="edu.nmsu.cs.scoring.RacingScore1" fork="true">
            <classpath path="${build}" />
            <arg value="1"/><arg value="2"/><arg value="a"/>
         </java>
      </jacoco:coverage>

      <!--TEST CASES RacingScore2-->
      <echo message="TEST RacingScore2: 1 2 2"/>
      <jacoco:coverage destfile="${result.exec.file}">
         <java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
            <classpath path="${build}" />
            <arg value="8"/><arg value="9"/><arg value="9"/>
         </java>
      </jacoco:coverage>

      <echo message="TEST RacingScore2: 2 1 2"/>
      <jacoco:coverage destfile="${result.exec.file}">
         <java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
            <classpath path="${build}" />
            <arg value="9"/><arg value="8"/><arg value="9"/>
         </java>
      </jacoco:coverage>

      <echo message="TEST RacingScore2: 3 2 1"/>
      <jacoco:coverage destfile="${result.exec.file}">
         <java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
            <classpath path="${build}" />
            <arg value="9"/><arg value="8"/><arg value="7"/>
         </java>
      </jacoco:coverage>

      <echo message="TEST RacingScore2: 2 3 1"/>
      <jacoco:coverage destfile="${result.exec.file}">
         <java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
            <classpath path="${build}" />
            <arg value="8"/><arg value="9"/><arg value="7"/>
         </java>
      </jacoco:coverage>

     <echo message="TEST RacingScore2: 1 9 6"/>
      <jacoco:coverage destfile="${result.exec.file}">
         <java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
            <classpath path="${build}" />
            <arg value="1"/><arg value="9.5"/><arg value="6"/>
         </java>
      </jacoco:coverage>

      <echo message="TEST RacingScore2: 1 2 3 3"/>
      <jacoco:coverage destfile="${result.exec.file}">
         <java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
            <classpath path="${build}" />
            <arg value="1"/><arg value="2"/><arg value="3"/><arg value="3"/>
         </java>
      </jacoco:coverage>

      <echo message="TEST RacingScore2: 3 2 1"/>
      <jacoco:coverage destfile="${result.exec.file}">
         <java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
            <classpath path="${build}" />
            <arg value="3"/><arg value="2"/><arg value="1"/>
         </java>
      </jacoco:coverage>

      <echo message="TEST RacingScore2:"/>
      <jacoco:coverage destfile="${result.exec.file}">
         <java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
            <classpath path="${build}" />
            <arg value="null"/><arg value="null"/><arg value="null"/>
         </java>
      </jacoco:coverage>

      <echo message="TEST RacingScore2: 3 3 3"/>
      <jacoco:coverage destfile="${result.exec.file}">
         <java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
            <classpath path="${build}" />
            <arg value="3"/><arg value="3"/><arg value="3"/>
         </java>
      </jacoco:coverage>

      <echo message="TEST RacingScore2: 1 2"/>
      <jacoco:coverage destfile="${result.exec.file}">
         <java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
            <classpath path="${build}" />
            <arg value="1"/><arg value="2"/>
         </java>
      </jacoco:coverage>

      <echo message="TEST RacingScore2: 1 2 a"/>
      <jacoco:coverage destfile="${result.exec.file}">
         <java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
            <classpath path="${build}" />
            <arg value="1"/><arg value="2"/><arg value="a"/>
         </java>
      </jacoco:coverage>

      <echo message="TEST RacingScore2: -1, 2, 3"/>
      <jacoco:coverage destfile="${result.exec.file}">
         <java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
            <classpath path="${build}" />
            <arg value="-1"/><arg value="2"/><arg value="3"/>
         </java>
      </jacoco:coverage>

      <echo message="TEST RacingScore2: 1 2 53"/>
      <jacoco:coverage destfile="${result.exec.file}">
         <java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
            <classpath path="${build}" />
            <arg value="1"/><arg value="2"/><arg value="53"/>
         </java>
      </jacoco:coverage>

      <echo message="TEST RacingScore2: -1 1 2"/>
      <jacoco:coverage destfile="${result.exec.file}">
         <java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
            <classpath path="${build}" />
            <arg value="-1"/><arg value="2"/><arg value="3"/>
         </java>
      </jacoco:coverage>
   
      <echo message="TEST RacingScore2: 60 1 2"/>
      <jacoco:coverage destfile="${result.exec.file}">
         <java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
            <classpath path="${build}" />
            <arg value="60"/><arg value="2"/><arg value="3"/>
         </java>
      </jacoco:coverage>

      <echo message="TEST RacingScore2: 1 -1 2"/>
      <jacoco:coverage destfile="${result.exec.file}">
         <java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
            <classpath path="${build}" />
            <arg value="1"/><arg value="-2"/><arg value="3"/>
         </java>
      </jacoco:coverage>

      <echo message="TEST RacingScore2: 1 60 2"/>
      <jacoco:coverage destfile="${result.exec.file}">
         <java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
            <classpath path="${build}" />
            <arg value="1"/><arg value="60"/><arg value="3"/>
         </java>
      </jacoco:coverage>

      <echo message="TEST RacingScore2: 1 2 -1"/>
      <jacoco:coverage destfile="${result.exec.file}">
         <java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
            <classpath path="${build}" />
            <arg value="1"/><arg value="2"/><arg value="-3"/>
         </java>
      </jacoco:coverage>

      <echo message="TEST RacingScore2: 1 2 60"/>
      <jacoco:coverage destfile="${result.exec.file}">
         <java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
            <classpath path="${build}" />
            <arg value="1"/><arg value="2"/><arg value="60"/>
         </java>
      </jacoco:coverage>

	</target>

   <!-- generate a new jacoco report from a new data file; only runs if needed -->
	<target name="report" depends="jacocorun,checkReport" unless="report.notneeded">
		<echo>report needed...</echo>
		<jacoco:report>
			<executiondata>
				<file file="${result.exec.file}" />
			</executiondata>
			<structure name="JaCoCo Ant Example">
				<classfiles>
					<fileset dir="${build}" />
				</classfiles>
				<sourcefiles encoding="UTF-8">
					<fileset dir="${src}" />
				</sourcefiles>
			</structure>
			<html destdir="${result.report.dir}" />

		</jacoco:report>
	</target>

	<!-- tests if new jacoco report needs generated by checking if top report file
        (index.html) is newer than the run data file (jacoco.exec) -->
	<target name="checkReport">
		<uptodate property="report.notneeded" targetfile="${result.report.dir}/index.html" srcfile="${result.exec.file}" />
	</target>

	<!-- clean up by removing all generated files; do "ant clean" to start afresh -->
	<target name="clean">
		<delete>
			<fileset dir="." includes="**/*.class **/jacoco.exec" />
		</delete>
		<delete dir="${result.report.dir}" />
	</target>

</project>