<!--  Sample Ant build file for running RacingScore under JaCoCo 
     Jonathan Cook, 17 Sep 2015; modified Phoebe O. Toups Dugas, July 2020 using code from: 
     https://www.eclemma.org/jacoco/trunk/doc/examples/build/build.xml
     Some components
        Copyright (c) 2009, 2020 Mountainminds GmbH & Co. KG and Contributors
        This program and the accompanying materials are made available under
        the terms of the Eclipse Public License 2.0 which is available at
        http://www.eclipse.org/legal/epl-2.0

        SPDX-License-Identifier: EPL-2.0

        Contributors:
            Marc R. Hoffmann - initial API and implementation  -->
<project xmlns:jacoco="antlib:org.jacoco.ant" name="racingscore" default="report">
<!--  directory configuration - if things are not working, start troubleshooting from here  -->
<property name="jacoco.dir" location="lib/"/>
<property name="src.dir" location="src/"/>
<property name="build.dir" location="bin/"/>
<property name="result.dir" location="./target"/>
<property name="result.report.dir" location="${result.dir}/site/jacoco"/>
<property name="result.exec.file" location="${result.dir}/jacoco.exec"/>
<taskdef uri="antlib:org.jacoco.ant" resource="org/jacoco/ant/antlib.xml">
<classpath path="${jacoco.dir}/jacocoant.jar"/>
</taskdef>
<!--  standard compile task, but turn debugging on for source viewing  -->
<target name="compile" description="compile the source">
<mkdir dir="${build.dir}"/>
<javac srcdir="${src.dir}" destdir="${build.dir}" includeantruntime="false" debug="true"/>
</target>
<!--  tests if new jacoco run is needed by checking if the jacoco.exec file is
        newer than the class files or this build file  -->
<target name="checkRun">
<uptodate property="run.notneeded" targetfile="${result.exec.file}">
<srcfiles dir="${src.dir}" includes="**/*.java build.xml"/>
</uptodate>
</target>
<!--  official test example, merged with our code  -->
<target name="test" depends="compile,checkRun" unless="run.notneeded">
<echo>run needed...</echo>
<!-- 
	 Step 2: Wrap test execution with the JaCoCo coverage task 
	 this example has two runs, you'll need to perhaps
        modify them, and then add more; this only runs if needed
	 -->
    
<!--  --------test for RacingScore1-------------------  -->
<!--  fixed: if (s > score3)
               s = score3;  --> 
    
<!--  test1 for RacingScore1, with two largest number in index 0 and index 1  -->
<echo message="TEST RacingScore1: 8 9 6"/>
<jacoco:coverage destfile="${result.exec.file}">
<java classname="edu.nmsu.cs.scoring.RacingScore1" fork="true">
<classpath path="${build.dir}"/>
<arg value="8"/>
<arg value="9"/>
<arg value="6"/>
</java>
</jacoco:coverage>

<!--  test2 for RacingScore1, with two largest number in index 0 and index 2  -->
<echo message="TEST RacingScore1: 9 6 8"/>
<jacoco:coverage destfile="${result.exec.file}">
<java classname="edu.nmsu.cs.scoring.RacingScore1" fork="true">
<classpath path="${build.dir}"/>
<arg value="9"/>
<arg value="6"/>
<arg value="8"/>
</java>
</jacoco:coverage>

<!--  test3 for RacingScore1, with two largest number in index 1 and index 2  -->
<echo message="TEST RacingScore1: 6 8 9"/>
<jacoco:coverage destfile="${result.exec.file}">
<java classname="edu.nmsu.cs.scoring.RacingScore1" fork="true">
<classpath path="${build.dir}"/>
<arg value="6"/>
<arg value="8"/>
<arg value="9"/>
</java>
</jacoco:coverage>

<!--  test4 for RacingScore1, with all even numbers  -->
<echo message="TEST RacingScore1: 6 6 6"/>
<jacoco:coverage destfile="${result.exec.file}">
<java classname="edu.nmsu.cs.scoring.RacingScore1" fork="true">
<classpath path="${build.dir}"/>
<arg value="6"/>
<arg value="6"/>
<arg value="6"/>
</java>
</jacoco:coverage>

<!--  test5 for RacingScore1, with only two numbers  -->
<echo message="TEST RacingScore1: 6 6"/>
<jacoco:coverage destfile="${result.exec.file}">
<java classname="edu.nmsu.cs.scoring.RacingScore1" fork="true">
<classpath path="${build.dir}"/>
<arg value="6"/>
<arg value="6"/>
</java>
</jacoco:coverage>

<!--  test6 for RacingScore1, with all double numbers  -->
<echo message="TEST RacingScore1: 6.6 6.5 9.8"/>
<jacoco:coverage destfile="${result.exec.file}">
<java classname="edu.nmsu.cs.scoring.RacingScore1" fork="true">
<classpath path="${build.dir}"/>
<arg value="6.6"/>
<arg value="6.5"/>
<arg value="9.8"/>
</java>
</jacoco:coverage>

<!--  test7 for RacingScore1, with null input  -->
<echo message="TEST RacingScore1: "/>
<jacoco:coverage destfile="${result.exec.file}">
<java classname="edu.nmsu.cs.scoring.RacingScore1" fork="true">
<classpath path="${build.dir}"/>
</java>
</jacoco:coverage>

<!--  --------test for RacingScore2-------------------  -->
<!--  fixed: if input == null || input.lenght != 3  -->

<!--  test for RacingScore2  -->
<!--  score1 both true case  -->
<echo message="TEST RacingScore2: 1 2 3"/>
<jacoco:coverage destfile="${result.exec.file}">
<java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
<classpath path="${build.dir}"/>
<arg value="1"/>
<arg value="2"/>
<arg value="3"/>
</java>
</jacoco:coverage>

<!--  test for RacingScore2  -->
<!--  score1 both false case  -->
<echo message="TEST RacingScore2: 3 2 1"/>
<jacoco:coverage destfile="${result.exec.file}">
<java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
<classpath path="${build.dir}"/>
<arg value="3"/>
<arg value="2"/>
<arg value="1"/>
</java>
</jacoco:coverage>

<!--  test for RacingScore2  -->
<!--  score1 false true case  -->
<echo message="TEST RacingScore2: 2 1 3"/>
<jacoco:coverage destfile="${result.exec.file}">
<java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
<classpath path="${build.dir}"/>
<arg value="2"/>
<arg value="1"/>
<arg value="3"/>
</java>
</jacoco:coverage>

<!--  test for RacingScore2  -->
<!--  score1 true false case  -->
<echo message="TEST RacingScore2: 2 3 1"/>
<jacoco:coverage destfile="${result.exec.file}">
<java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
<classpath path="${build.dir}"/>
<arg value="2"/>
<arg value="3"/>
<arg value="1"/>
</java>
</jacoco:coverage>

<!--  test for RacingScore2  -->
<!--  score2 both true case  -->
<echo message="TEST RacingScore2: 2 1 3"/>
<jacoco:coverage destfile="${result.exec.file}">
<java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
<classpath path="${build.dir}"/>
<arg value="2"/>
<arg value="1"/>
<arg value="3"/>
</java>
</jacoco:coverage>

<!--  test for RacingScore2  -->
<!--  score2 both false case  -->
<echo message="TEST RacingScore2: 2 3 1"/>
<jacoco:coverage destfile="${result.exec.file}">
<java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
<classpath path="${build.dir}"/>
<arg value="2"/>
<arg value="3"/>
<arg value="1"/>
</java>
</jacoco:coverage>

<!--  test for RacingScore2  -->
<!--  score2 false true case  -->
<echo message="TEST RacingScore2: 1 2 3"/>
<jacoco:coverage destfile="${result.exec.file}">
<java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
<classpath path="${build.dir}"/>
<arg value="1"/>
<arg value="2"/>
<arg value="3"/>
</java>
</jacoco:coverage>

<!--  test for RacingScore2  -->
<!--  score2 true false case  -->
<echo message="TEST RacingScore2: 3 2 1"/>
<jacoco:coverage destfile="${result.exec.file}">
<java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
<classpath path="${build.dir}"/>
<arg value="3"/>
<arg value="2"/>
<arg value="1"/>
</java>
</jacoco:coverage>



<!--  test for RacingScore2  -->
<!--  score3 both true case  -->
<echo message="TEST RacingScore2: 3 4 1"/>
<jacoco:coverage destfile="${result.exec.file}">
<java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
<classpath path="${build.dir}"/>
<arg value="3"/>
<arg value="4"/>
<arg value="1"/>
</java>
</jacoco:coverage>

<!--  test for RacingScore2  -->
<!--  score3 both false case  -->
<echo message="TEST RacingScore2: 1 2 3"/>
<jacoco:coverage destfile="${result.exec.file}">
<java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
<classpath path="${build.dir}"/>
<arg value="1"/>
<arg value="2"/>
<arg value="3"/>
</java>
</jacoco:coverage>

<!--  test for RacingScore2  -->
<!--  score3 false true case  -->
<echo message="TEST RacingScore2: 4 2 3"/>
<jacoco:coverage destfile="${result.exec.file}">
<java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
<classpath path="${build.dir}"/>
<arg value="4"/>
<arg value="2"/>
<arg value="3"/>
</java>
</jacoco:coverage>

<!--  test for RacingScore2  -->
<!--  score3 true false case  -->
<echo message="TEST RacingScore2: 1 5 3"/>
<jacoco:coverage destfile="${result.exec.file}">
<java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
<classpath path="${build.dir}"/>
<arg value="1"/>
<arg value="5"/>
<arg value="3"/>
</java>
</jacoco:coverage>

<!--  test for RacingScore2  -->
<!--  special case1  -->
<echo message="TEST RacingScore2: 1 1 2"/>
<jacoco:coverage destfile="${result.exec.file}">
<java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
<classpath path="${build.dir}"/>
<arg value="1"/>
<arg value="1"/>
<arg value="2"/>
</java>
</jacoco:coverage>

<!--  test for RacingScore2  -->
<!--  special case2  -->
<echo message="TEST RacingScore2: 1 2 1"/>
<jacoco:coverage destfile="${result.exec.file}">
<java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
<classpath path="${build.dir}"/>
<arg value="1"/>
<arg value="2"/>
<arg value="1"/>
</java>
</jacoco:coverage>

<!--  test for RacingScore2  -->
<!--  special case3  -->
<echo message="TEST RacingScore2: 2 1 1"/>
<jacoco:coverage destfile="${result.exec.file}">
<java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
<classpath path="${build.dir}"/>
<arg value="2"/>
<arg value="1"/>
<arg value="1"/>
</java>
</jacoco:coverage>


<!--  test for RacingScore2, score1 = score2 = score3 -->
<echo message="TEST RacingScore2: 0 0 0"/>
<jacoco:coverage destfile="${result.exec.file}">
<java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
<classpath path="${build.dir}"/>
<arg value="0"/>
<arg value="0"/>
<arg value="0"/>
</java>
</jacoco:coverage>

<!--  test for RacingScore2, only two aruguments -->
<echo message="TEST RacingScore2: 6 6"/>
<jacoco:coverage destfile="${result.exec.file}">
<java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
<classpath path="${build.dir}"/>
<arg value="6"/>
<arg value="6"/>
</java>
</jacoco:coverage>

<!--  test for RacingScore2, using not integer -->
<echo message="TEST RacingScore2: 6.7 6.8 6.9"/>
<jacoco:coverage destfile="${result.exec.file}">
<java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
<classpath path="${build.dir}"/>
<arg value="6.7"/>
<arg value="6.8"/>
<arg value="6.9"/>
</java>
</jacoco:coverage>

<!--  test for RacingScore2, using values larger than 50 -->
<echo message="TEST RacingScore2: 55 66 88"/>
<jacoco:coverage destfile="${result.exec.file}">
<java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
<classpath path="${build.dir}"/>
<arg value="55"/>
<arg value="1"/>
<arg value="88"/>
</java>
</jacoco:coverage>

<!--  test for RacingScore2, using values less than 0 -->
<echo message="TEST RacingScore2: -8 -6 -5"/>
<jacoco:coverage destfile="${result.exec.file}">
<java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
<classpath path="${build.dir}"/>
<arg value="-8"/>
<arg value="-6"/>
<arg value="-5"/>
</java>
</jacoco:coverage>

<!--  test for RacingScore2, using values less than 0 -->
<echo message="TEST RacingScore2: 55 -5 -8"/>
<jacoco:coverage destfile="${result.exec.file}">
<java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
<classpath path="${build.dir}"/>
<arg value="55"/>
<arg value="-5"/>
<arg value="-5"/>
</java>
</jacoco:coverage>


<!--  test for RacingScore2, using values more than 50 in index 0-->
<echo message="TEST RacingScore2: 60 0 0" />
<jacoco:coverage destfile="${result.exec.file}">
<java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
<classpath path="${build.dir}" />
<arg value="60" />
<arg value="0" />
<arg value="0" />
</java>
</jacoco:coverage>

<!--  test for RacingScore2, using values more than 50 in index 1-->

<echo message="TEST RacingScore2: 0 60 0" />
<jacoco:coverage destfile="${result.exec.file}">
<java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
<classpath path="${build.dir}" />
<arg value="0" />
<arg value="60" />
<arg value="0" />
</java>
</jacoco:coverage>

<!--  test for RacingScore2, using values more than 50 in index 2-->
<echo message="TEST RacingScore2: 0 0 60" />
<jacoco:coverage destfile="${result.exec.file}">
<java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
<classpath path="${build.dir}" />
<arg value="0" />
<arg value="0" />
<arg value="60" />
</java>
</jacoco:coverage>

<!--  test for RacingScore2, using values less than 0 in index 0-->
<jacoco:coverage destfile="${result.exec.file}">
<java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
<classpath path="${build.dir}" />
<arg value="-1" />
<arg value="0" />
<arg value="0" />
</java>
</jacoco:coverage>

<!--  test for RacingScore2, using values less than 0 in index 1-->
<jacoco:coverage destfile="${result.exec.file}">
<java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
<classpath path="${build.dir}" />
<arg value="0" />
<arg value="-1" />
<arg value="0" />
</java>
</jacoco:coverage>

<!--  test for RacingScore2, using values less than 0 in index 2-->
<echo message="TEST RacingScore2: 0 0 -1" />
<jacoco:coverage destfile="${result.exec.file}">
<java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
<classpath path="${build.dir}" />
<arg value="0" />
<arg value="0" />
<arg value="-1" />
</java>
</jacoco:coverage>













<!--  test for RacingScore2, using values less than 0 -->
<echo message="TEST RacingScore2: -8 55 -5"/>
<jacoco:coverage destfile="${result.exec.file}">
<java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
<classpath path="${build.dir}"/>
<arg value="-8"/>
<arg value="55"/>
<arg value="-5"/>
</java>
</jacoco:coverage>

<!--  test for RacingScore2, using values less than 0 -->
<echo message="TEST RacingScore2: -8 -5 55"/>
<jacoco:coverage destfile="${result.exec.file}">
<java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
<classpath path="${build.dir}"/>
<arg value="-8"/>
<arg value="-5"/>
<arg value="55"/>
</java>
</jacoco:coverage>

<!--  test for RacingScore2, with null input -->
<echo message="TEST RacingScore2:"/>
<jacoco:coverage destfile="${result.exec.file}">
<java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
<classpath path="${build.dir}"/>
</java>
</jacoco:coverage>

<!--  test for RacingScore2, with null input -->
<echo message="TEST RacingScore2:"/>
<jacoco:coverage destfile="${result.exec.file}">
<java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
<classpath path="${build.dir}"/>
<arg value="-5"/>
</java>
</jacoco:coverage>

</target>
<target name="report" depends="test,checkReport" unless="report.notneeded">
<echo>report needed...</echo>
<!--   Step 3: Create coverage report   -->
<jacoco:report>
<!-- 
	 This task needs the collected execution data and ... 
	 -->
<executiondata>
<file file="${result.exec.file}"/>
</executiondata>
<!--   the class files and optional source files ...   -->
<structure name="JaCoCo Ant Example">
<classfiles>
<fileset dir="${build.dir}"/>
</classfiles>
<sourcefiles encoding="UTF-8">
<fileset dir="${src.dir}"/>
</sourcefiles>
</structure>
<!--   to produce reports in different formats.   -->
<html destdir="${result.report.dir}"/>
<csv destfile="${result.report.dir}/report.csv"/>
<xml destfile="${result.report.dir}/report.xml"/>
</jacoco:report>
</target>
<!--  tests if new jacoco report needs generated by checking if top report file
        (index.html) is newer than the run data file (jacoco.exec)  -->
<target name="checkReport">
<uptodate property="report.notneeded" targetfile="${result.report.dir}/index.html" srcfile="${result.exec.file}"/>
</target>
<!--  clean up by removing all generated files; do "ant clean" to start afresh  -->
<target name="clean">
<delete>
<fileset dir="." includes="**/*.class **/jacoco.exec"/>
</delete>
<delete dir="${result.report.dir}"/>
</target>
</project>