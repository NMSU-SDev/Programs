<!-- Sample Ant build file for running RacingScore under JaCoCo -->
<!-- Jonathan Cook, 17 Sep 2015 -->
<project name="racingscore" default="jacocoreport" basedir = "." xmlns:jacoco="antlib:org.jacoco.ant">

   <!-- property to allow ant to find jacoco  -->
   <property name="jacoco.dir" location="lib/"/>
   <property name="result.dir" location="./target"/>

   <!-- main directory locations  -->
   <property name="src-dir" location="src/"/>
   <property name="build-dir" location="bin/"/>
	<property name="result.report.dir" location="${result.dir}/site/jacoco" />
	<property name="result.exec.file" location="${result.dir}/jacoco.exec" />


   <taskdef uri="antlib:org.jacoco.ant" resource="org/jacoco/ant/antlib.xml">
      <classpath path="${jacoco.dir}/jacocoant.jar"/>
   </taskdef>

   <!-- standard compile task, but turn debugging on for source viewing -->
   <target name="compile" description="compile the source">
      <mkdir dir = "${build-dir}" />
      <javac srcdir="${src-dir}" destdir="${build-dir}" includeantruntime="false" debug="true"/>
   </target>



   <!-- tests if new jacoco run is needed by checking if the jacoco.exec file is
        newer than the class files or this build file -->
   	<target name="checkRun">
		<uptodate property="run.notneeded" targetfile="${result.exec.file}">
			<srcfiles dir="${src-dir}" includes="**/*.java build.xml" />
		</uptodate>
	</target>

   <!-- run program under jacoco. Only runs if needed -->
   <target name="test" depends="compile,checkRun" unless="run.notneeded">
      <echo>run needed...</echo>
      <delete>
         <!-- must delete coverage data file to start afresh (otherwise coverage accumulates) -->
         <fileset dir="." includes="jacoco.exec"/>
      </delete>
      
      <!--RacingScore1: Testing with score1 < score2 and score3 < score1 and score2 -->
      <echo message="TEST RacingScore1: 8 9 6"/>
      <jacoco:coverage destfile="${result.exec.file}">
         <java classname="edu.nmsu.cs.scoring.RacingScore1" fork="true">
            <classpath path="${build-dir}" />
            <arg value="8"/><arg value="9"/><arg value="6"/>
         </java>
      </jacoco:coverage>

      <!--RacingScore1: Testing with only 2 scores -->
      <echo message="TEST RacingScore1: 8 9"/>
      <jacoco:coverage destfile="${result.exec.file}">
         <java classname="edu.nmsu.cs.scoring.RacingScore1" fork="true">
            <classpath path="${build-dir}" />
            <arg value="8"/><arg value="9"/>
         </java>
      </jacoco:coverage>

      <!--RacingScore1: Testing with non-integer values -->
      <echo message="TEST RacingScore1: 8 9 3.3"/>
      <jacoco:coverage destfile="${result.exec.file}">
         <java classname="edu.nmsu.cs.scoring.RacingScore1" fork="true">
            <classpath path="${build-dir}" />
            <arg value="8"/><arg value="9"/><arg value="3.3"/>
         </java>
      </jacoco:coverage>

      <!--RacingScore1: Testing with score1 < score2 < score3 -->
      <echo message="TEST RacingScore1: 1 2 3"/>
      <jacoco:coverage destfile="${result.exec.file}">
         <java classname="edu.nmsu.cs.scoring.RacingScore1" fork="true">
            <classpath path="${build-dir}" />
            <arg value="1"/><arg value="2"/><arg value="3"/>
         </java>
      </jacoco:coverage>

      <!--RacingScore1: Testing with score1 > score2 > score3 -->
      <echo message="TEST RacingScore1: 11 7 4"/>
      <jacoco:coverage destfile="${result.exec.file}">
         <java classname="edu.nmsu.cs.scoring.RacingScore1" fork="true">
            <classpath path="${build-dir}" />
            <arg value="11"/><arg value="7"/><arg value="4"/>
         </java>
      </jacoco:coverage>



      <echo message="RacingScore2 BEGIN TESTING"/>



      <!--RacingScore2: Testing with score1 > score2 > score3 -->
      <echo message="TEST RacingScore2: 11 7 4"/>
      <jacoco:coverage destfile="${result.exec.file}">
         <java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
            <classpath path="${build-dir}" />
            <arg value="11"/><arg value="7"/><arg value="4"/>
         </java>
      </jacoco:coverage>

      <!--RacingScore2: Testing with score1 < score2 < score3 -->
      <echo message="TEST RacingScore2: 1 2 3"/>
      <jacoco:coverage destfile="${result.exec.file}">
         <java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
            <classpath path="${build-dir}" />
            <arg value="1"/><arg value="2"/><arg value="3"/>
         </java>
      </jacoco:coverage>

      <!--RacingScore2: Testing with score1 > score2 and score2 < score3 -->
      <echo message="TEST RacingScore2: 4 2 3"/>
      <jacoco:coverage destfile="${result.exec.file}">
         <java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
            <classpath path="${build-dir}" />
            <arg value="4"/><arg value="2"/><arg value="3"/>
         </java>
      </jacoco:coverage>

      <!--RacingScore2: Testing with all scores being the same -->
      <echo message="TEST RacingScore2: 3 3 3"/>
      <jacoco:coverage destfile="${result.exec.file}">
         <java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
            <classpath path="${build-dir}" />
            <arg value="3"/><arg value="3"/><arg value="3"/>
         </java>
      </jacoco:coverage>

      <!--RacingScore2: Testing with score1 being lowest -->
      <echo message="TEST RacingScore2: 3 7 8"/>
      <jacoco:coverage destfile="${result.exec.file}">
         <java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
            <classpath path="${build-dir}" />
            <arg value="3"/><arg value="7"/><arg value="8"/>
         </java>
      </jacoco:coverage>

      <!--RacingScore2: Testing with score2 being lowest -->
      <echo message="TEST RacingScore2: 7 3 8"/>
      <jacoco:coverage destfile="${result.exec.file}">
         <java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
            <classpath path="${build-dir}" />
            <arg value="7"/><arg value="3"/><arg value="8"/>
         </java>
      </jacoco:coverage>

      <!--RacingScore2: Testing with score3 being lowest -->
      <echo message="TEST RacingScore2: 7 8 3"/>
      <jacoco:coverage destfile="${result.exec.file}">
         <java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
            <classpath path="${build-dir}" />
            <arg value="7"/><arg value="8"/><arg value="3"/>
         </java>
      </jacoco:coverage>

      <!--RacingScore2: Testing with score2 <= score1 and score2 > score3 -->
      <echo message="TEST RacingScore2: 7 2 1"/>
      <jacoco:coverage destfile="${result.exec.file}">
         <java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
            <classpath path="${build-dir}" />
            <arg value="7"/><arg value="2"/><arg value="1"/>
         </java>
      </jacoco:coverage>

      <!--RacingScore2: Testing with only 2 scores -->
      <echo message="TEST RacingScore2: 8 9"/>
      <jacoco:coverage destfile="${result.exec.file}">
         <java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
            <classpath path="${build-dir}" />
            <arg value="8"/><arg value="9"/>
         </java>
      </jacoco:coverage>

      <!--RacingScore2: Testing with string score -->
      <echo message="TEST RacingScore2: one 2 3"/>
      <jacoco:coverage destfile="${result.exec.file}">
         <java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
            <classpath path="${build-dir}" />
            <arg value="one"/><arg value="2"/><arg value="3"/>
         </java>
      </jacoco:coverage>

      <!--RacingScore2: Testing with non-integer values -->
      <echo message="TEST RacingScore2: 8 9 3.3"/>
      <jacoco:coverage destfile="${result.exec.file}">
         <java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
            <classpath path="${build-dir}" />
            <arg value="8"/><arg value="9"/><arg value="3.3"/>
         </java>
      </jacoco:coverage>

      <!--RacingScore2: Testing with score1 value above 50 -->
      <echo message="TEST RacingScore2: 60 8 3"/>
      <jacoco:coverage destfile="${result.exec.file}">
         <java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
            <classpath path="${build-dir}" />
            <arg value="60"/><arg value="8"/><arg value="3"/>
         </java>
      </jacoco:coverage>

      <!--RacingScore2: Testing with score1 value below 0 -->
      <echo message="TEST RacingScore2: -5 8 3"/>
      <jacoco:coverage destfile="${result.exec.file}">
         <java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
            <classpath path="${build-dir}" />
            <arg value="-5"/><arg value="8"/><arg value="3"/>
         </java>
      </jacoco:coverage>

      <!--RacingScore2: Testing with score2 value above 50 -->
      <echo message="TEST RacingScore2: 8 60 3"/>
      <jacoco:coverage destfile="${result.exec.file}">
         <java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
            <classpath path="${build-dir}" />
            <arg value="8"/><arg value="60"/><arg value="3"/>
         </java>
      </jacoco:coverage>

      <!--RacingScore2: Testing with score2 value below 0 -->
      <echo message="TEST RacingScore2: 8 -5 3"/>
      <jacoco:coverage destfile="${result.exec.file}">
         <java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
            <classpath path="${build-dir}" />
            <arg value="8"/><arg value="-5"/><arg value="3"/>
         </java>
      </jacoco:coverage>

      <!--RacingScore2: Testing with score3 value above 50 -->
      <echo message="TEST RacingScore2: 8 3 60"/>
      <jacoco:coverage destfile="${result.exec.file}">
         <java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
            <classpath path="${build-dir}" />
            <arg value="8"/><arg value="3"/><arg value="60"/>
         </java>
      </jacoco:coverage>

      <!--RacingScore2: Testing with score3 value below 0 -->
      <echo message="TEST RacingScore2: 8 3 -5"/>
      <jacoco:coverage destfile="${result.exec.file}">
         <java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
            <classpath path="${build-dir}" />
            <arg value="8"/><arg value="3"/><arg value="-5"/>
         </java>
      </jacoco:coverage>

   </target>

   <!-- tests if new jacoco report needs generated by checking if top report file
        (index.html) is newer than the run data file (jacoco.exec) -->
   <target name="checkReport">
      <uptodate property="report.notneeded" targetfile="${result.report.dir}/index.html" srcfile="${result.exec.file}" />
   </target>

   <!-- generate a new jacoco report from a new data file; only runs if needed -->
   <target name="jacocoreport" depends="test,checkReport" unless="report.notneeded">
      <echo>report needed...</echo>
      <jacoco:report>
         <executiondata>
            <file file="${result.exec.file}" />
         </executiondata>
         <structure name="JaCoCo Ant Example">
            <classfiles>
               <fileset dir="${build-dir}"/>
            </classfiles>
            <sourcefiles encoding="UTF-8">
               <fileset dir="${src-dir}"/>
            </sourcefiles>
         </structure>
         <html destdir="${result.report.dir}" />
			<csv destfile="${result.report.dir}/report.csv" />
			<xml destfile="${result.report.dir}/report.xml" />
      </jacoco:report>
   </target>

   <!-- clean up by removing all generated files; do "ant clean" to start afresh -->
   <target name="clean">
      <delete>
			<fileset dir="." includes="**/*.class **/jacoco.exec" />
		</delete>
      <delete dir="${result.report.dir}" />
     
   </target>

</project>

