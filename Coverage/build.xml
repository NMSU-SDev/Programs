<!-- Sample Ant build file for running IglooScore under JaCoCo -->
<!-- Jonathan Cook, 17 Sep 2015 -->
<project name="racingscore" default="report" xmlns:jacoco="antlib:org.jacoco.ant">

   <!-- property to allow ant to find jacoco: CHANGE THE PATH to point to yours -->
   <property name="jacoco.dir" location="lib/"/>
   <property name="src.dir" location="src/"/>
   <property name="build.dir" location="bin/"/>
   <property name="result.dir" location="./target"/>
   <property name="result.report.dir" location="${result.dir}/site/jacoco"/>
   <property name="result.exec.file" location="${result.dir}/jacoco.exec"/>

   <taskdef uri="antlib:org.jacoco.ant" resource="org/jacoco/ant/antlib.xml">
      <classpath path="${jacoco.dir}/jacocoant.jar"/>
   </taskdef>

   <!-- standard compile task, but turn debugging on for source viewing -->
   <target name="compile" description="compile the source">
      <mkdir dir="${build.dir}" />
      <javac srcdir="${src.dir}" destdir="${build.dir}" includeantruntime="false" debug="true"/>
   </target>

   <!-- tests if new jacoco run is needed by checking if the jacoco.exec file is
        newer than the class files or this build file -->
   <target name="checkRun">
      <uptodate property="run.notneeded" targetfile="${result.exec.file}">
         <srcfiles dir="${src.dir}" includes="**/*.java build.xml" />
      </uptodate>
   </target>

   <!-- run program under jacoco: this example has two runs, you'll need to perhaps
        modify them, and then add more; this only runs if needed -->
   <target name="test" depends="compile,checkRun" unless="run.notneeded">
      <echo>run needed...</echo>
   
   
      <echo message="TEST RacingScore1: 8 9 6"/>
      <jacoco:coverage destfile="${result.exec.file}">
         <java classname="edu.nmsu.cs.scoring.RacingScore1" fork="true">
            <classpath path = "${build.dir}" />
            <arg value="8"/>
            <arg value="9"/>
            <arg value="6"/>
         </java>
      </jacoco:coverage>

      		<echo message="TEST RacingScore1: 50 9 6" />
		<jacoco:coverage destfile="${result.exec.file}">
			<java classname="edu.nmsu.cs.scoring.RacingScore1" fork="true">
				<classpath path="${build.dir}" />
				<arg value="50" />
				<arg value="9" />
				<arg value="6" />
			</java>
		</jacoco:coverage>

		<echo message="TEST RacingScore1: 50 9 100" />
		<jacoco:coverage destfile="${result.exec.file}">
			<java classname="edu.nmsu.cs.scoring.RacingScore1" fork="true">
				<classpath path="${build.dir}" />
				<arg value="50" />
				<arg value="9" />
				<arg value="100" />
			</java>
		</jacoco:coverage>

		<echo message="TEST RacingScore1: 8 9" />
		<jacoco:coverage destfile="${result.exec.file}">
			<java classname="edu.nmsu.cs.scoring.RacingScore1" fork="true">
				<classpath path="${build.dir}" />
				<arg value="8" />
				<arg value="9" />
			</java>
		</jacoco:coverage>

		<echo message="TEST RacingScore1: a b c" />
		<jacoco:coverage destfile="${result.exec.file}">
			<java classname="edu.nmsu.cs.scoring.RacingScore1" fork="true">
				<classpath path="${build.dir}" />
				<arg value="a" />
				<arg value="b" />
				<arg value="c" />
			</java>
		</jacoco:coverage>

      <echo message="TEST RacingScore2: 8 9 6"/>
      <jacoco:coverage destfile="${result.exec.file}">
         <java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
            <classpath path ="${build.dir}" />
            <arg value="8"/>
            <arg value="9"/>
            <arg value="6"/>
         </java>
      </jacoco:coverage>

      		<!-- racingscore2 tests start -->
		<!-- if (score1 < score2 && score1 < score3) -->
		<echo message="TEST RacingScore2: 1 9 6" />
		<jacoco:coverage destfile="${result.exec.file}">
			<java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
				<classpath path="${build.dir}" />
				<arg value="1" />
				<arg value="9" />
				<arg value="6" />
			</java>
		</jacoco:coverage>

		<!-- if (score1 < score2 && !score1 < score3) -->
		<echo message="TEST RacingScore2: 5 6 4" />
		<jacoco:coverage destfile="${result.exec.file}">
			<java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
				<classpath path="${build.dir}" />
				<arg value="5" />
				<arg value="6" />
				<arg value="4" />
			</java>
		</jacoco:coverage>
	
		<!-- else if (score2 < score1 && score2 < score3) -->
		<echo message="TEST RacingScore2: 8 1 6" />
		<jacoco:coverage destfile="${result.exec.file}">
			<java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
				<classpath path="${build.dir}" />
				<arg value="8" />
				<arg value="1" />
				<arg value="6" />
			</java>
		</jacoco:coverage>

		<!-- else if (!score2 < score1 && score2 < score3) -->
		<echo message="TEST RacingScore2: 8 5 1" />
		<jacoco:coverage destfile="${result.exec.file}">
			<java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
				<classpath path="${build.dir}" />
				<arg value="8" />
				<arg value="5" />
				<arg value="1" />
			</java>
		</jacoco:coverage>

		<!-- else if (score3 < score1 && !score3 < score2) -->
		<echo message="TEST RacingScore2: 10 9 9" />
		<jacoco:coverage destfile="${result.exec.file}">
			<java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
				<classpath path="${build.dir}" />
				<arg value="10" />
				<arg value="9" />
				<arg value="9" />
			</java>
		</jacoco:coverage>

		<!-- else -->
		<echo message="TEST RacingScore2: 3 3 3" />
		<jacoco:coverage destfile="${result.exec.file}">
			<java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
				<classpath path="${build.dir}" />
				<arg value="3" />
				<arg value="3" />
				<arg value="3" />
			</java>
		</jacoco:coverage>


		<echo message="TEST RacingScore2: -1 -1 -1" />
		<jacoco:coverage destfile="${result.exec.file}">
			<java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
				<classpath path="${build.dir}" />
				<arg value="-1" />
				<arg value="-1" />
				<arg value="-1" />
			</java>
		</jacoco:coverage>

		<echo message="TEST RacingScore2: 60 0 0" />
		<jacoco:coverage destfile="${result.exec.file}">
			<java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
				<classpath path="${build.dir}" />
				<arg value="60" />
				<arg value="0" />
				<arg value="0" />
			</java>
		</jacoco:coverage>

		<echo message="TEST RacingScore2: 0 60 0" />
		<jacoco:coverage destfile="${result.exec.file}">
			<java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
				<classpath path="${build.dir}" />
				<arg value="0" />
				<arg value="60" />
				<arg value="0" />
			</java>
		</jacoco:coverage>

		<echo message="TEST RacingScore2: 0 0 60" />
		<jacoco:coverage destfile="${result.exec.file}">
			<java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
				<classpath path="${build.dir}" />
				<arg value="0" />
				<arg value="0" />
				<arg value="60" />
			</java>
		</jacoco:coverage>

		<echo message="TEST RacingScore2: -1 0 0" />
		<jacoco:coverage destfile="${result.exec.file}">
			<java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
				<classpath path="${build.dir}" />
				<arg value="-1" />
				<arg value="0" />
				<arg value="0" />
			</java>
		</jacoco:coverage>

		<echo message="TEST RacingScore2: 0 -1 0" />
		<jacoco:coverage destfile="${result.exec.file}">
			<java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
				<classpath path="${build.dir}" />
				<arg value="0" />
				<arg value="-1" />
				<arg value="0" />
			</java>
		</jacoco:coverage>

		<echo message="TEST RacingScore2: 0 0 -1" />
		<jacoco:coverage destfile="${result.exec.file}">
			<java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
				<classpath path="${build.dir}" />
				<arg value="0" />
				<arg value="0" />
				<arg value="-1" />
			</java>
		</jacoco:coverage>

		<echo message="TEST RacingScore2: 1 2 3 4" />
		<jacoco:coverage destfile="${result.exec.file}">
			<java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
				<classpath path="${build.dir}" />
				<arg value="1" />
				<arg value="2" />
				<arg value="3" />
				<arg value="4" />
			</java>
		</jacoco:coverage>

		<!-- "Error: arguments must be integers!" -->
		<echo message="TEST RacingScore2: a b c" />
		<jacoco:coverage destfile="${result.exec.file}">
			<java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
				<classpath path="${build.dir}" />
				<arg value="a" />
				<arg value="b" />
				<arg value="c" />
			</java>
		</jacoco:coverage>
   </target>

   <!-- generate a new jacoco report from a new data file; only runs if needed -->
   <target name="report" depends="test,checkReport" unless="report.notneeded">
      <echo>report needed...</echo>
      <jacoco:report>
         <executiondata>
            <file file="${result.exec.file}"/>
         </executiondata>
         <structure name="JaCoCo Ant Example">
            <classfiles>
               <fileset dir="${build.dir}"/>
            </classfiles>
            <sourcefiles encoding="UTF-8">
               <fileset dir="${src.dir}"/>
            </sourcefiles>
         </structure>
         <html destdir="${result.report.dir}"/>
         <csv destfile="${result.report.dir}/report.csv"/>
         <xml destfile="${result.report.dir}/report.xml"/>
      </jacoco:report>
   </target>

      <!-- tests if new jacoco report needs generated by checking if top report file
        (index.html) is newer than the run data file (jacoco.exec) -->
   <target name="checkReport">
      <uptodate property="report.notneeded" targetfile="${result.report.dir}/index.html" srcfile="${result.exec.file}" />
   </target>

   <!-- clean up by removing all generated files; do "ant clean" to start afresh -->
   <target name="clean">
      <delete>
         <fileset dir="." includes="**/*.class **/jacoco.exec"/>
      </delete>
      <delete dir="${result.report.dir}" />
   </target>

</project>

